# 변수
	> (메모리) : 데이터를 담는 일정 크기의 공간 ( 일정 크기 : 데이터 형식에 따라 결정 )
	Ex.
		int x; : int 데이터 형식(정수형), x 변수 식별자;
		x = 100; : x 변수 식별자, = 대입 연산자, 100 데이터
			> (메모리) : 변수 x의 할당된 공간에 데이터 100이 기록되어짐 ( int x = 100; )

# 값 형식과 참조 형식
	> (Stack 메모리) : 값 형식과 관련.
	> (Heap 메모리) : 참조 형식과 관련

# 스택과 값 형식
	(Stack) : LIFO = Last In First Out  (마지막에 들어온 데이터가 첫번째로 나온다)
# 힙과 참조 형식
	힙은 저장되어 있는 데이터를 스스로 제거하는 매커니즘을 가지고 있지 않아, CLR의 가비지 컬렉터(Garbage Collector)를 사용. 가비지 컬렉터는 프로그램 뒤에 숨어 동작하면서 힙에 더 이상 사용하지 않는 객체가 있으면 그 객체를 쓰레기로 간주하고 수거하는 기능
	> 참조 형식 변수는 힙과 스택을 함께 이용, 힙 영역에는 데이터를 저장하고 스택 영역에는 데이터가 저장되어 있는 힙의 메모리 주소를 저장.	
	Ex. 
		object a = 10;
		object b = 20;	
			(Stack) : a = &(10);
			(Stack) : b = &(20);
			(Heap) : &(10) = 10;
			(Heap) : &(20) = 20;

# 기본 데이터 형식 - 숫자 데이터 형식
	C#은 15가지 기본 자료 형식 중 12가지를 숫자 데이터 형식(Numeric Types)으로 제공하고 있습니다.
		> 12가지 형식은 정수 계열, 부동 소수 계열, 소수 계열

# 기본 데이터 형식 - 숫자 데이터 형식 - 정수 계열 형식
	byte		부호 없는 정수	8비트		0~255
	sbyte		부호 있는 정수	8비트		-128~127
	short		부호 있는 정수	16비트	-32768~32767
	ushort		부호 없는 정수	16비트	0~65535
	int			부호 있는 정수	32비트	-2147483648~2147483647
	uint		부호 없는 정수	32비트	0~4294967295
	long		부호 있는 정수	64비트	-922337203685477508~922337203685477507
	ulong		부호 없는 정수	64비트	0~18446744073709551615
	char		유니 코드 문자	16비트
	
# 정수 형식 예제 프로그램
	IntegralTypes

# 기본 데이터 형식 - 숫자 데이터 형식 - 정수 계열 형식 - 부호 있는 정수와 부호 없는 정수
	> 2의 보수법	
		N을 수 부분 비트에 입력
		8개의 비트 전체를 반전
		반전된 비트에 1를 더함

# 2의 보수법 예제 프로그램
	SignedUnsigned

# 기본 데이터 형식 - 숫자 데이터 형식 - 정수 계열 형식 - 오버플로우 예제 프로그램
	Overflow

# 기본 데이터 형식 - 숫자 데이터 형식 - 부동 소수점 형식
	float		단일 정밀도 부동 소수점 형식		32비트	-3.402823e28~3.402823e38
	double	복수 정밀도 부동 소수점 형식		64비트	-1.79769313486232e308~1.79769313486232e308

	float 
	부호비트(1비트) + 지수부비트(8비트) + 가수부비트(23비트) = 32비트
		지수부비트 : 소수점의 위치를 나타내기 위해 사용
		가수부비트 : 수를 표현하는 데 사용

# float 형식 예제
	FloatingPoint

# 기본 데이터 형식 - 숫자 데이터 형식 - 부동 소수점 형식 - Decimal 형식
	Decimal		29자리 데이터를 표현할 수 있는 소수 형식		128비트		+-1.0x10e-18 ~ +-7.9x10e28

# decimal 형식 예제
	Decimal

# 기본 데이터 형식 - 숫자 데이터 형식 - 문자 형식과 문자열 형식 예제
	Char
	String

# 논리 형식
	bool		논리 형식		8비트		true, false
# 논리 형식 예제
	Bool

# object 형식
	어떤 데이터이든지 다룰 수 있는 데이터 형식.
# object 형식 예제
	Object

# 박싱과 언박싱
	object 형식은 참조 형식이기 때문에 힙에 데이터를 할당합니다.
	object 형식은 값 형식의 데이터를 힙에 할당하기 위한 "박싱(Boxing)" 기능을 제공합니다.
	object 형식에 값 형식의 데이터를 할당하려는 시도가 이루어지면 object 형식은 박싱을 수행해서 해당 데이터를 힙에 할당합니다.

	박싱되어 있는 값을 꺼내 값 형식 변수에 저장하는 과정을 일컬어서 "언박싱(Unboxing)"이라고 합니다.
# 박싱과 언박싱 예제
	BoxingUnboxing

# 데이터 형식 바꾸기 - 문자열을 숫자로, 숫자를 문자열로 변환
	int a = int.Parse("12345");
	float b = float.Parse("123.45");

	int c = 12345;
	string d = c.ToString();

# 상수
	const 자료형 상수명 = 값;

# 열거 형식
	enum 열거 형식명 : 기반 자료형 { 상수1, 상수2, 상수3, ... }

# Nullable 형식
	C#은 할당된 메모리 공간에 어떤 값이든 넣도록 강제하는데, Nullable형식을 사용 함으로써, 강제하지 못하도록 할 수 있습니다.
	Nullable 형식을 사용할 수 있는 경우는 값 형식에 한해서입니다. 참조 형식은 사용 불가.
	int? a = null;
	float? b = null;
	double? c = null;

	> Nullable 형식은 두가지 속성을 갖고 있습니다.
		HasValue : 값이 있는가
		Value : 값

# var : 데이터 형식을 알아서 파악하는...
	var a = 3; // a는 int 형식
	var b = "Hello"; // b는 string 형식

	@ var는 지역 변수로만 사용할 수 있습니다. 또한 명시적 형식을 선언해야합니다.