# 산술 연산자
	+		양쪽 피연산자를 더합니다.			
	-		왼쪽 피연산자에서 오른쪽 피연산자를 차감합니다.
	*		양쪽 피연산자를 곱합니다.
	/		왼쪽 연산자를 오른쪽 피연산자로 나눈 몫을 구합니다.
	%		왼쪽 연산자를 오른쪽 피연산자로 나눈 후의 나머지를 구합니다.

# 증가 연산자와 감소 연산자
	++		증가 연산자		피연산자의 값을 1 증가시킵니다.
	--		감소 연산자		피연산자의 값을 1 감소시킵니다.

# 문자열 결합 연산자
	string result = "123" + "456";

# 관계 연산자
	<		왼쪽 피연산자가 오른쪽 피연산자보다 작으면 참, 아니면 거짓
	>
	<=
	>=
	==
	!=

# 논리 연산자
	&&	 - 둘다 참이면 참
	||		 - 둘중에 하나가 참이면 참
	!		 - 반전

# 조건 연산자
	?: 는 피연산자가 세개 됩니다.
		조건식 ? 참일떄의값 : 거짓일때의값;
		1 < 2  ? 2             : 1;

# 비트 연산자
	<<			왼쪽 시프트 연산자			첫 번째 피연산자의 비트를 두 번째 피연산자의 수 만큼 왼쪽으로 이동시킵니다.		첫 번째 피연산자는 int, uint, long, ulong이며 피연산자는 int 형식만 지원합니다.
	>>			오른쪽 시프트 연산자		첫 번째 피연산자의 비트를 두 번째 피연산자의 수 만큼 오른쪽으로 이동시킵니다.	<<와 같습니다.
	&			논리곱(AND) 연산자			두 피연산자의 비트 논리곱을 수행합니다.													정수 계열 형식과 bool 형식에 대해 사용할 수 있습니다.
	|			논리합(OR) 연산자			두 피연산자의 비트 논리합을 수행합니다.													&와 같습니다.
	^			베타적 논리합(XOR)연산자	두 피연산자의 비트 베타적 논리합을 수행합니다.											&와 같습니다.
	~			보수(NOT) 연산자			피연산자의 비트를 0은 1로, 1은 0으로 반전시킵니다. 단항 연산자입니다.				int, uint, long, ulong에 대해 사용이 가능합니다.

# 시프트 연산자	
	비트를 왼쪽이나 오른쪽으로 이동시키는 기능을 합니다.
		넘친 비트는 사라지고, 비어 있는 비트에는 0

@ Console.WriteLine()
	> 여러 개의 데이터 한번에 출력하기
	Console.WriteLine("{0} {1} {2}", a, b, c);
	> 정수를 특정 자릿수의 10진수로 출력하기
	Console.WriteLine("{0:D5}", a); // 출력 결과 : 00003
	> 정수를 특정 자릿수의 16진수로 출력하기
	Console.WriteLine("{0:X8}", a); // 출력 결과 : 000000FF

# 비트 논리 연산자
	&		논리곱(AND) 연산자				두 피연산자의 비트에 대해 논리곱을 수행합니다.											정수계열 형식과 bool 형식에 대해 사용할 수 있습니다.
	|		논리합(OR)	연산자				두 피연산자의 비트에 대해 논리합을 수행합니다.											&와 같습니다.
	^		베타적 논리합(XOR)연산자		두 피연산자의 비트의 대해 베타적 논리합을 수행합니다.									&와 같습니다.
	~		보수(NOT)	연산자				피연산자의 비트에 대해 0은 1로, 1은 0으로 반전시킵니다	. 단항 연산자입니다.		int, uint, long, ulong에 대해 사용이 가능합니다.

# 할당 연산자
	=		할당 연산자	
	+=		덧셈 할당 연산자
	-=		뺄셈 할당 연산자
	*=		곱셈 할당 연산자
	/=		나눗셈 할당 연산자
	%=	나머지 할당 연산자
	&=	논리곱 할당 연산자
	|=		논리합 할당 연산자
	^=		베타적 논리합 할당 연산자
	<<=	왼쪽 시프트 할당 연산자
	>>=	오른쪽 시프트 할당 연산자

# 연산자의 우선순위
	후위 ++, --
	전위 ++, --
	*, /, %
	+, -
	<<, >>
	<, >, <=, >=, is, as
	==, !=
	&
	^
	|
	&&
	||
	?:
	=, *=, /=, %=, +=, -=, <<=, >>=, &=, ^=, |=

